on: [workflow_dispatch, push, pull_request]
name: ervcp-ci

# Environment variables available to all jobs and steps in this workflow
env:
  CLUSTER_NAME: ervcp-aks
  CLUSTER_RESOURCE_GROUP: ataccama
  NAMESPACE: ${{ github.sha }}
  SECRET: acr-secret
  APP_NAME: ervcp

jobs:
  golang-test:
    name: golang-lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.29
        working-directory: app

  k8s-test:
    name: kubernetes-lint
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: 'kubeval'
        uses: azure/k8s-lint@v1
        with:
          manifests: |
            manifests/ervcp-deployment.yml
            manifests/ervcp-service.yml
            manifests/redis-deployment.yml
            manifests/redis-service.yml

  build-and-publish:
    needs: golang-test
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@main

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Login to Azure registry login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: 'Publish the image'
      run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}

  deploy:
    name: "deploy to AKS"
    needs: [build-and-publish, k8s-test]
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@main

    # Set the target Azure Kubernetes Service (AKS) cluster.
    - uses: azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    - name: 'Create namespace'
      run: |
        kubectl create namespace ${{ env.NAMESPACE }}

    # Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}

    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/redis-deployment.yml
          manifests/redis-service.yml
          manifests/ervcp-deployment.yml
          manifests/ervcp-service.yml
        images: |
          ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}

    - name: 'Get service IP address'
      run: |
        kubectl get svc/ervcp --namespace ${{ env.NAMESPACE }} -o="jsonpath={.status.loadBalancer.ingress[].ip}"
